diff --git a/sim/app/heatbugs/Bug.java b/sim/app/heatbugs/Bug.java
new file mode 100644
index 0000000..2105172
--- /dev/null
+++ b/sim/app/heatbugs/Bug.java
@@ -0,0 +1,9 @@
+package sim.app.heatbugs;
+
+import sim.engine.Steppable;
+
+public abstract class Bug implements Steppable {
+
+    public abstract void setRandomMovementProbability(double randomMovementProbability);
+
+}
\ No newline at end of file
diff --git a/sim/app/heatbugs/Bugs.java b/sim/app/heatbugs/Bugs.java
new file mode 100644
index 0000000..99d2a3b
--- /dev/null
+++ b/sim/app/heatbugs/Bugs.java
@@ -0,0 +1,202 @@
+/*
+  Copyright 2006 by Sean Luke and George Mason University
+  Licensed under the Academic Free License version 3.0
+  See the file "LICENSE" for more information
+*/
+
+package sim.app.heatbugs;
+import sim.engine.*;
+import sim.field.grid.*;
+import sim.util.*;
+
+public /*strictfp*/ class Bugs extends SimState
+    {
+    private static final long serialVersionUID = 1;
+
+    public double minIdealTemp = 17000;
+    public double maxIdealTemp = 31000;
+    public double minOutputHeat = 6000;
+    public double maxOutputHeat = 10000;
+
+    public double evaporationRate = 0.993;
+    public double diffusionRate = 1.0;
+    public static final double MAX_HEAT = 32000;
+    public static final double MIN_HEAT = 16000;
+    public double randomMovementProbability = 0.1;
+
+    public int gridHeight;
+    public int gridWidth;
+    public int bugCount;
+    Bug[] bugs;
+    
+    public double getMinimumIdealTemperature() { return minIdealTemp; }
+    public void setMinimumIdealTemperature( double temp ) { if( temp <= maxIdealTemp ) minIdealTemp = temp; }
+    public double getMaximumIdealTemperature() { return maxIdealTemp; }
+    public void setMaximumIdealTemperature( double temp ) { if( temp >= minIdealTemp ) maxIdealTemp = temp; }
+    public double getMinimumOutputHeat() { return minOutputHeat; }
+    public void setMinimumOutputHeat( double temp ) { if( temp <= maxOutputHeat ) minOutputHeat = temp; }
+    public double getMaximumOutputHeat() { return maxOutputHeat; }
+    public void setMaximumOutputHeat( double temp ) { if( temp >= minOutputHeat ) maxOutputHeat = temp; }
+    public double getEvaporationConstant() { return evaporationRate; }
+    public void setEvaporationConstant( double temp ) { if( temp >= 0 && temp <= 1 ) evaporationRate = temp; }
+    public Object domEvaporationConstant() { return new Interval(0.0,1.0); }
+    public double getDiffusionConstant() { return diffusionRate; }
+    public void setDiffusionConstant( double temp ) { if( temp >= 0 && temp <= 1 ) diffusionRate = temp; }
+    public Object domDiffusionConstant() { return new Interval(0.0, 1.0); }
+    public double getRandomMovementProbability() { return randomMovementProbability; }
+        
+    public double[] getBugXPos() {
+        try
+            {
+            double[] d = new double[bugs.length];
+            for(int x=0;x<bugs.length;x++)
+                {
+                d[x] = ((Int2D)(buggrid.getObjectLocation(bugs[x]))).x;
+                }
+            return d;
+            }
+        catch (Exception e) { return new double[0]; }
+        }
+    
+    public double[] getBugYPos() {
+        try
+            {
+            double[] d = new double[bugs.length];
+            for(int x=0;x<bugs.length;x++)
+                {
+                d[x] = ((Int2D)(buggrid.getObjectLocation(bugs[x]))).y;
+                }
+            return d;
+            }
+        catch (Exception e) { return new double[0]; }
+        }
+
+
+    public void setRandomMovementProbability( double t )
+        {
+        if (t >= 0 && t <= 1)
+            {
+            randomMovementProbability = t;
+            for( int i = 0 ; i < bugCount ; i++ )
+                if (bugs[i]!=null)
+                    bugs[i].setRandomMovementProbability( randomMovementProbability );
+            }
+        }
+    public Object domRandomMovementProbability() { return new Interval(0.0, 1.0); }
+        
+    public double getMaximumHeat() { return MAX_HEAT; }
+
+    // we presume that no one relies on these DURING a simulation
+    public int getGridHeight() { return gridHeight; }
+    public void setGridHeight(int val) { if (val > 0) gridHeight = val; }
+    public int getGridWidth() { return gridWidth; }
+    public void setGridWidth(int val) { if (val > 0) gridWidth = val; }
+    public int getBugCount() { return bugCount; }
+    public void setBugCount(int val) { if (val >= 0) bugCount = val; }
+    
+    public DoubleGrid2D valgrid;
+    public DoubleGrid2D valgrid2;
+    public SparseGrid2D buggrid;
+    
+
+    /** Creates a HeatBugs simulation with the given random number seed. */
+    public Bugs(long seed)
+        {
+        this(seed, 100, 100, 100);
+        }
+        
+    public Bugs(long seed, int width, int height, int count)
+        {
+        super(seed);
+        gridWidth = width; gridHeight = height; bugCount = count;
+        createGrids();
+        }
+
+    protected void createGrids()
+        {
+        bugs = new Bug[bugCount];
+        valgrid = new DoubleGrid2D(gridWidth, gridHeight,0);
+        valgrid2 = new DoubleGrid2D(gridWidth, gridHeight, 0);
+        buggrid = new SparseGrid2D(gridWidth, gridHeight);      
+        }
+    
+    ThreadedDiffuser diffuser = null;
+        
+    /** Resets and starts a simulation */
+    public void start()
+        {
+        super.start();  // clear out the schedule
+        
+        // make new grids
+        createGrids();
+    
+        // Schedule the heat bugs -- we could instead use a RandomSequence, which would be faster
+        // But we spend no more than 3% of our total runtime in the scheduler max, so it's not worthwhile
+        for(int x=0;x<bugCount/2;x++)
+            {
+            bugs[x] = new HeatBug(random.nextDouble() * (maxIdealTemp - minIdealTemp) + minIdealTemp,
+                random.nextDouble() * (maxOutputHeat - minOutputHeat) + minOutputHeat,
+                randomMovementProbability, x);
+            buggrid.setObjectLocation(bugs[x],random.nextInt(gridWidth),random.nextInt(gridHeight));
+            schedule.scheduleRepeating(bugs[x]);
+            }
+        
+        for(int x=bugCount/2;x<bugCount;x++)
+        {
+        bugs[x] = new IceBug(random.nextDouble() * (maxIdealTemp - minIdealTemp) + minIdealTemp,
+            random.nextDouble() * (maxOutputHeat - minOutputHeat) + minOutputHeat,
+            randomMovementProbability, x);
+        buggrid.setObjectLocation(bugs[x],random.nextInt(gridWidth),random.nextInt(gridHeight));
+        schedule.scheduleRepeating(bugs[x]);
+        }
+                        
+        // Here we're going to pick whether or not to use Diffuser (the default) or if
+        // we're really going for the gusto and have multiple processors on our computer, we
+        // can use our multithreaded super-neato ThreadedDiffuser!  On a Power Mac G5 with
+        // two processors, we get almost a 90% speedup in the underlying model because *so*
+        // much time is spent in the Diffuser.
+                            
+        // Schedule the diffuser to happen after the heatbugs
+        if (Bugs.availableProcessors() >  1)  // yay, multi-processor!
+            {
+            // store away the ThreadedHexaDiffuser so we can call cleanup() on it later in our stop() method.
+            diffuser = new ThreadedDiffuser();
+            schedule.scheduleRepeating(Schedule.EPOCH,1,diffuser,1);
+            }
+        else
+            schedule.scheduleRepeating(Schedule.EPOCH,1,new Diffuser(),1);
+        }
+    
+    public void stop()
+        {
+        if (diffuser != null) diffuser.cleanup();
+        diffuser = null;
+        }
+    
+    /** This little function calls Runtime.getRuntime().availableProcessors() if it's available,
+        else returns 1.  That function is nonexistent in Java 1.3.1, but it exists in 1.4.x.
+        So we're doing a little dance through the Reflection library to call the method tentatively!
+        The value returned by Runtime is the number of available processors on the computer.  
+        If you're only using 1.4.x, then all this is unnecessary -- you can just call
+        Runtime.getRuntime().availableProcessors() instead. */
+    public static int availableProcessors()
+        {
+        Runtime runtime = Runtime.getRuntime();
+        try { return ((Integer)runtime.getClass().getMethod("availableProcessors", (Class[])null).
+                invoke(runtime,(Object[])null)).intValue(); }
+        catch (Exception e) { return 1; }  // a safe but sometimes wrong assumption!
+        }
+        
+    
+    
+    public static void main(String[] args)
+        {
+        doLoop(Bugs.class, args);
+        System.exit(0);
+        }    
+    }
+    
+    
+    
+    
+    
diff --git a/sim/app/heatbugs/HeatBug.java b/sim/app/heatbugs/HeatBug.java
index 20ed461..8ff20b2 100644
--- a/sim/app/heatbugs/HeatBug.java
+++ b/sim/app/heatbugs/HeatBug.java
@@ -9,7 +9,7 @@ import sim.field.grid.*;
 import sim.util.*;
 import sim.engine.*;
 
-public /*strictfp*/ class HeatBug implements Steppable
+public /*strictfp*/ class HeatBug extends Bug implements Steppable
     {
     private static final long serialVersionUID = 1;
 
@@ -26,22 +26,26 @@ public /*strictfp*/ class HeatBug implements Steppable
     public void setRandomMovementProbability( double t ) { if (t >= 0 && t <= 1) randomMovementProbability = t; }
     public Object domRandomMovementProbability() { return new Interval(0.0,1.0); }
     
-    public HeatBug( double idealTemp, double heatOutput, double randomMovementProbability) 
+    public int id;
+    
+    public HeatBug( double idealTemp, double heatOutput, double randomMovementProbability, int id) 
         {
         this.heatOutput = heatOutput;
         this.idealTemp = idealTemp;
         this.randomMovementProbability = randomMovementProbability;
+        this.id = id;
         }
         
     public void addHeat(final DoubleGrid2D grid, final int x, final int y, final double heat)
         {
         grid.field[x][y] += heat;
-        if (grid.field[x][y] > HeatBugs.MAX_HEAT) grid.field[x][y] = HeatBugs.MAX_HEAT;
+        if (grid.field[x][y] > Bugs.MAX_HEAT) grid.field[x][y] = Bugs.MAX_HEAT;
         }
         
     public void step( final SimState state )
         {
-        HeatBugs hb = (HeatBugs)state;
+
+        Bugs hb = (Bugs)state;
         
         Int2D location = hb.buggrid.getObjectLocation(this);
         int myx = location.x;
@@ -92,6 +96,19 @@ public /*strictfp*/ class HeatBug implements Steppable
 
         hb.buggrid.setObjectLocation(this,bestx,besty);
         addHeat(hb.valgrid,bestx,besty,heatOutput);
+        
+        if (state.schedule.getSteps() > 1000) {
+            state.finish();
+            System.exit(1);
         }
 
+        System.out.println("{" +
+                "\"id\":" + this.id + "," + 
+                "\"step\":" + state.schedule.getSteps() + "," +
+                "\"x\":" + bestx + "," +
+                "\"y\":" + besty + "," +
+                "\"ideal\":" + this.idealTemp + 
+                "}");
+        
+        }
     }
diff --git a/sim/app/heatbugs/HeatBugs.java b/sim/app/heatbugs/HeatBugs.java
index 8e93591..d8de0e5 100644
--- a/sim/app/heatbugs/HeatBugs.java
+++ b/sim/app/heatbugs/HeatBugs.java
@@ -135,7 +135,7 @@ public /*strictfp*/ class HeatBugs extends SimState
             {
             bugs[x] = new HeatBug(random.nextDouble() * (maxIdealTemp - minIdealTemp) + minIdealTemp,
                 random.nextDouble() * (maxOutputHeat - minOutputHeat) + minOutputHeat,
-                randomMovementProbability);
+                randomMovementProbability, x);
             buggrid.setObjectLocation(bugs[x],random.nextInt(gridWidth),random.nextInt(gridHeight));
             schedule.scheduleRepeating(bugs[x]);
             }
diff --git a/sim/app/heatbugs/IceBug.java b/sim/app/heatbugs/IceBug.java
new file mode 100644
index 0000000..37a6048
--- /dev/null
+++ b/sim/app/heatbugs/IceBug.java
@@ -0,0 +1,114 @@
+/*
+  Copyright 2006 by Sean Luke and George Mason University
+  Licensed under the Academic Free License version 3.0
+  See the file "LICENSE" for more information
+*/
+
+package sim.app.heatbugs;
+import sim.field.grid.*;
+import sim.util.*;
+import sim.engine.*;
+
+public /*strictfp*/ class IceBug extends Bug implements Steppable
+    {
+    private static final long serialVersionUID = 1;
+
+    public double idealTemp;
+    public double getIdealTemperature() { return idealTemp; }
+    public void setIdealTemperature( double t ) { idealTemp = t; }
+
+    public double heatOutput;
+    public double getHeatOutput() { return heatOutput; }
+    public void setHeatOutput( double t ) { heatOutput = t; }
+
+    public double randomMovementProbability;
+    public double getRandomMovementProbability() { return randomMovementProbability; }
+    public void setRandomMovementProbability( double t ) { if (t >= 0 && t <= 1) randomMovementProbability = t; }
+    public Object domRandomMovementProbability() { return new Interval(0.0,1.0); }
+    
+    public int id;
+    
+    public IceBug( double idealTemp, double heatOutput, double randomMovementProbability, int id) 
+        {
+        this.heatOutput = heatOutput;
+        this.idealTemp = idealTemp;
+        this.randomMovementProbability = randomMovementProbability;
+        this.id = id;
+        }
+        
+    public void addHeat(final DoubleGrid2D grid, final int x, final int y, final double heat)
+        {
+        grid.field[x][y] -= heat;
+        if (grid.field[x][y] < Bugs.MIN_HEAT) grid.field[x][y] = Bugs.MIN_HEAT;
+        }
+        
+    public void step( final SimState state )
+        {
+
+        Bugs hb = (Bugs)state;
+        
+        Int2D location = hb.buggrid.getObjectLocation(this);
+        int myx = location.x;
+        int myy = location.y;
+        
+        final int START=-1;
+        int bestx = START;
+        int besty = 0;
+        
+        if (state.random.nextBoolean(randomMovementProbability))  // go to random place
+            {
+            bestx = hb.buggrid.stx(state.random.nextInt(3) - 1 + myx);  // toroidal
+            besty = hb.buggrid.sty(state.random.nextInt(3) - 1 + myy);  // toroidal
+            }
+        else if( hb.valgrid.field[myx][myy] > idealTemp )  // go to coldest place
+            {
+            for(int x=-1;x<2;x++)
+                for (int y=-1;y<2;y++)
+                    if (!(x==0 && y==0))
+                        {
+                        int xx = hb.buggrid.stx(x + myx);    // toroidal
+                        int yy = hb.buggrid.sty(y + myy);       // toroidal
+                        if (bestx==START ||
+                            (hb.valgrid.field[xx][yy] < hb.valgrid.field[bestx][besty]) ||
+                            (hb.valgrid.field[xx][yy] == hb.valgrid.field[bestx][besty] && state.random.nextBoolean()))  // not uniform, but enough to break up the go-up-and-to-the-left syndrome
+                            { bestx = xx; besty = yy; }
+                        }
+            }
+        else if ( hb.valgrid.field[myx][myy] < idealTemp )  // go to warmest place
+            {
+            for(int x=-1;x<2;x++)
+                for (int y=-1;y<2;y++)
+                    if (!(x==0 && y==0))
+                        {
+                        int xx = hb.buggrid.stx(x + myx);    // toroidal
+                        int yy = hb.buggrid.sty(y + myy);       // toroidal
+                        if (bestx==START || 
+                            (hb.valgrid.field[xx][yy] > hb.valgrid.field[bestx][besty]) ||
+                            (hb.valgrid.field[xx][yy] == hb.valgrid.field[bestx][besty] && state.random.nextBoolean()))  // not uniform, but enough to break up the go-up-and-to-the-left syndrome
+                            { bestx = xx; besty = yy; }
+                        }
+            }
+        else            // stay put
+            {
+            bestx = myx;
+            besty = myy;
+            }
+
+        hb.buggrid.setObjectLocation(this,bestx,besty);
+        addHeat(hb.valgrid,bestx,besty,heatOutput);
+        
+        if (state.schedule.getSteps() > 1000) {
+            state.finish();
+            System.exit(1);
+        }
+
+        System.out.println("{" +
+                "\"id\":" + this.id + "," + 
+                "\"step\":" + state.schedule.getSteps() + "," +
+                "\"x\":" + bestx + "," +
+                "\"y\":" + besty + "," +
+                "\"ideal\":" + this.idealTemp + 
+                "}");
+        
+        }
+    }
diff --git a/sim/app/heatbugs/IceBugsWithUI.java b/sim/app/heatbugs/IceBugsWithUI.java
new file mode 100644
index 0000000..04a8a96
--- /dev/null
+++ b/sim/app/heatbugs/IceBugsWithUI.java
@@ -0,0 +1,145 @@
+/*
+  Copyright 2006 by Sean Luke and George Mason University
+  Licensed under the Academic Free License version 3.0
+  See the file "LICENSE" for more information
+*/
+
+package sim.app.heatbugs;
+import sim.engine.*;
+import sim.display.*;
+import sim.portrayal.grid.*;
+import sim.portrayal.*;
+import java.awt.*;
+import javax.swing.*;
+import sim.field.grid.*;
+import sim.util.*;
+import javax.swing.event.*;
+import java.awt.event.*;
+import java.awt.geom.*;
+import sim.portrayal.simple.*;
+
+public class IceBugsWithUI extends GUIState
+    {
+    public Display2D display;
+    public JFrame displayFrame;
+
+    FastValueGridPortrayal2D heatPortrayal = new FastValueGridPortrayal2D("Heat");
+    SparseGridPortrayal2D bugPortrayal = new SparseGridPortrayal2D();
+
+// uncomment this to try out trails  (also need to uncomment out some others in this file, look around)
+// you'll also need to cause a Bug to wander a lot more in order to see the trail -- I suggest setting
+// its idealTemperature to 0 in the Inspector.
+/*
+  SparseGridPortrayal2D trailsPortrayal = new SparseGridPortrayal2D(); 
+*/
+
+    public static void main(String[] args)
+        {
+        new IceBugsWithUI().createController();
+        }
+    
+    public IceBugsWithUI() { super(new Bugs(System.currentTimeMillis())); }
+    
+    public IceBugsWithUI(SimState state) { super(state); }
+    
+    public static String getName()
+        {
+        return "HeatBugs";
+        }
+    
+    public Object getSimulationInspectedObject() { return state; }  // non-volatile
+
+    public void start()
+        {
+        super.start();
+        // set up our portrayals
+        setupPortrayals();
+        }
+    
+    public void load(SimState state)
+        {
+        super.load(state);
+        // we now have new grids.  Set up the portrayals to reflect that
+        setupPortrayals();
+        }
+        
+    // This is called by start() and by load() because they both had this code
+    // so I didn't have to type it twice :-)
+    public void setupPortrayals()
+        {
+        // tell the portrayals what to portray and how to portray them
+        bugPortrayal.setField(((Bugs)state).buggrid);
+        //bugPortrayal.setPortrayalForAll( new MovablePortrayal2D(new sim.portrayal.simple.OvalPortrayal2D(Color.white)));   // all the heatbugs will be white ovals
+        bugPortrayal.setPortrayalForClass(HeatBug.class, new MovablePortrayal2D(new sim.portrayal.simple.OvalPortrayal2D(Color.white)));
+        bugPortrayal.setPortrayalForClass(HeatBug.class, new MovablePortrayal2D(new sim.portrayal.simple.OvalPortrayal2D(Color.blue)));
+
+        heatPortrayal.setField(((Bugs)state).valgrid);
+        heatPortrayal.setMap(new sim.util.gui.SimpleColorMap(0,Bugs.MAX_HEAT,Color.black,Color.red));
+                                
+// uncomment this to try out trails  (also need to uncomment out some others in this file, look around)
+// you'll also need to cause a Bug to wander a lot more in order to see the trail -- I suggest setting
+// its idealTemperature to 0 in the Inspector.
+/*
+  trailsPortrayal.setField(((HeatBugs)state).buggrid);
+  SimplePortrayal2D heatBugPortrayal = new sim.portrayal.simple.OvalPortrayal2D(Color.white);
+  for(int x=0;x<((HeatBugs)state).bugs.length;x++)
+  {
+  trailsPortrayal.setPortrayalForObject(((HeatBugs)state).bugs[x], 
+  new TrailedPortrayal2D(this, heatBugPortrayal, trailsPortrayal, 10));
+  }
+*/
+
+        // reschedule the displayer
+        display.reset();
+                
+        // redraw the display
+        display.repaint();
+        }
+    
+    public void init(final Controller c)
+        {
+        super.init(c);
+        
+        // Make the Display2D.  We'll have it display stuff later.
+        display = new Display2D(400,400,this); // at 400x400, we've got 4x4 per array position
+        displayFrame = display.createFrame();
+        displayFrame.setTitle(displayFrame.getTitle() + 
+                (Bugs.availableProcessors() > 1 ?
+                " (Multiprocessor)" : "" ));
+        c.registerFrame(displayFrame);   // register the frame so it appears in the "Display" list
+        displayFrame.setVisible(true);
+
+        // attach the portrayals
+        display.attach(heatPortrayal,"Heat");
+
+// uncomment this to try out trails  (also need to uncomment out some others in this file, look around)
+// you'll also need to cause a Bug to wander a lot more in order to see the trail -- I suggest setting
+// its idealTemperature to 0 in the Inspector.
+/*
+  display.attach( trailsPortrayal, "Trails" ); 
+*/
+
+        display.attach(bugPortrayal,"Bugs");
+
+        // specify the backdrop color  -- what gets painted behind the displays
+        display.setBackdrop(Color.black);
+        
+        // Start automatically!
+        Console con = (Console)c;
+        //con.pressPlay();
+        }
+        
+    public void quit()
+        {
+        super.quit();
+        
+        if (displayFrame!=null) displayFrame.dispose();
+        displayFrame = null;  // let gc
+        display = null;       // let gc
+        }
+    }
+    
+    
+    
+    
+    
diff --git a/sim/app/heatbugs/ThreadedDiffuser.java b/sim/app/heatbugs/ThreadedDiffuser.java
index bba1acd..788d247 100644
--- a/sim/app/heatbugs/ThreadedDiffuser.java
+++ b/sim/app/heatbugs/ThreadedDiffuser.java
@@ -31,7 +31,7 @@ public /*strictfp*/ class ThreadedDiffuser implements Steppable
                 public void step(SimState state) 
                     {
                     // diffuse top half of field
-                    HeatBugs heatbugs = (HeatBugs)state;
+                    Bugs heatbugs = (Bugs)state;
                     int _gridWidth = heatbugs.valgrid.getWidth();  // read-only, so threadsafe with other one
                     diffuse(heatbugs, 0, _gridWidth/2);
                     }
@@ -41,7 +41,7 @@ public /*strictfp*/ class ThreadedDiffuser implements Steppable
                 public void step(SimState state) 
                     {
                     // diffuse bottom half of field
-                    HeatBugs heatbugs = (HeatBugs)state;
+                    Bugs heatbugs = (Bugs)state;
                     int _gridWidth = heatbugs.valgrid.getWidth();  // read-only, so threadsafe with other one
                     diffuse(heatbugs, _gridWidth/2, _gridWidth);
                     }
@@ -55,7 +55,7 @@ public /*strictfp*/ class ThreadedDiffuser implements Steppable
         diffusers.step(state);
                 
         // copy HeatBugs.this.valgrid2 to HeatBugs.this.valgrid
-        HeatBugs heatbugs = (HeatBugs)state;
+        Bugs heatbugs = (Bugs)state;
         heatbugs.valgrid.setTo(heatbugs.valgrid2);
         }
         
@@ -72,7 +72,7 @@ public /*strictfp*/ class ThreadedDiffuser implements Steppable
     // this code is confusing.  See Diffuser.java for other less confusing examples
     // and for an explanation for why the code looks the way it does.
         
-    void diffuse(HeatBugs heatbugs, int start, int end)
+    void diffuse(Bugs heatbugs, int start, int end)
         {
         // locals are faster than instance variables
         final DoubleGrid2D _valgrid = heatbugs.valgrid;
